
services:
  # Main Rails application with SQLite
  app:
    build:
      context: .
      args:
        UID: ${UID:-1000}
        GID: ${GID:-1000}
        # To override without modifying this file, 
        # set DEFAULT_SHELL in .env e.g. DEFAULT_SHELL=/bin/zsh or 
        # run 'export DEFAULT_SHELL=/bin/zsh' before running 'docker compose up'
        DEFAULT_SHELL: ${DEFAULT_SHELL:-/bin/bash}
        # To override without modifying this file, 
        # set DEFAULT_EDITOR in .env e.g. DEFAULT_EDITOR=vim or
        # run 'export DEFAULT_EDITOR=nano' before running 'docker compose up'
        DEFAULT_EDITOR: ${DEFAULT_EDITOR:-nano}
    ports:
      - "${RAILS_SERVER_PORT:-3000}:3000"  # Rails server
      - "${MAILCATCHER_PORT:-1080}:1080"  # Mailcatcher web interface
    volumes:
      # Mount your source code for live editing
      # Use LOCAL_WORKSPACE_PATH in .env to override the default path
      # e.g. LOCAL_WORKSPACE_PATH=/Users/yourusername/projects/your-project
      # If the variable is set in .env, make sure if it points to the correct path
      # before running 'docker compose up'
      - ${LOCAL_WORKSPACE_PATH?Please define LOCAL_WORKSPACE_PATH in a .env file}:/home/dev/app
      # Mount your ssh keys for git access
      - ~/.ssh:/home/dev/.ssh:ro
    environment:
      - "RAILS_ENV=${RAILS_ENV:-development}"
    depends_on:
      - postgres
    stdin_open: true
    tty: true

  # Set postgresql as a service
  postgres:
    image: postgres:16
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      # # Mount your postgres data for persistence
      # - ${LOCAL_WORKSPACE_PATH?Please define LOCAL_WORKSPACE_PATH in a .env file}/postgres_data:/var/lib/postgresql/data
      - postgres_data:/var/lib/postgresql/data
      # Mount your postgres init script
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - "POSTGRES_USER=${POSTGRES_USER:-postgres}"
      - "POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}"
      - "POSTGRES_DB=${POSTGRES_DB:-postgres_development}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-postgres_development}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

volumes:
  postgres_data: